Part 1:
Question1:
1. the floatsisf and the divf are not defined in the kernal, which fails the 
insertion of the new module.the floatsisf and the divf were included in the 
warning.The output does not contain the average time if still display the output.
2. Instead of taking division with the float, we can take substraction on the 
total_waittime(with a condition of if the result is less than 0), accumlate the 
times of substractions into the integer ave_waittime that can be roughly regarded 
as the average waiting time for particular scheduling if the number of tasks is 
significantly smaller than the tasks' cycle time.
Question2:
example1: 
To set a few gaps between somewhere we would like to protect(over stack) to 
prevent those attact code overflow to our code.
exampel2: 
To abort any changed data that originally was considered as fixed so that the 
excution will not jump to attact code area.
example3:
To set x(excutable) only page, so that the spanning of the damaging code can 
be shut down by the excutable only part(such as kernal).
Part 2:
Q1:
Can we use bitwise operation to solve the problem in part1? Since we can achieve
division of 2 by operating a shift right on the number, we can assuming:
total_wait_time/x == total_wait_time/ 2^n where 2^n is the closest number to x.
Q2:
now that the thrash can be reduced by either reducing the mutiprocessing or 
giving lager memory space. Can we place those splicted large compiled code into
memory and stop adding new task to avoid paging over and over again? (the splict
part is kept so that whenever there's a enough space for the whole code, we can 
continue load the rest of compiled code) 



