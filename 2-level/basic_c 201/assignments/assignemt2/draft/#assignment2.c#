#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define sizeint 256
#define sizeterm 40
int FS=0,LS=0,BS=0,CTS=0,TS=0,CS=0;/*set a switch to indicate if there is -f,-l,-b,-t or -c,-t,-c option*/
FILE *readfp; 	/*declare the readfile pointer*/
FILE *termfp; 	/*declare the termfile pointer*/
char *nb;	/*declare the nearby term pointer*/
int *tdis;	/*declare the term distance pointer*/
int *ctis;	/*declare the char distance pointer*/
int HaveOption = 0;	/*set a swich to check if there is an option*/
char ch,ck;	/*ch is for readfile,ck is for termfile*/
char **list;	/*creat a array of potiners points to */
long letter,word;	/*the two numbers for each mentioned term*/

void getterm();
void search_std();
void search_nearby_term();
void search_nonearby();
void search_nearby_char();

int main(int argc, char *argv[])
{
  for(int i=1; i<argc; i++)
    {
      if(argv[i][0]=='-')
	{	
	  HaveOption = 1;
	  switch(argv[i][1])
	    {
	    case'f':
	      if(strlen(argv[i])!=2)
		readfp=fopen(&argv[i][2],"r");					
	      else
		readfp=fopen(argv[i+1],"r");	/*open readfile*/
	      FS=1;	/*set the switch as 1 to indicate if there is -f option*/
	      break;
	    case'l':
	      if(strlen(argv[i])!=2)
		termfp=fopen(&argv[i][2],"r");		
	      else
		termfp=fopen(argv[i+1],"r");	/*open termfile*/
	      LS=1;	/*set the switch as 1 to indicate if there is -l option*/
	      break;
	    case'b':
	      if(strlen(argv[i])!=2)
		nb = &argv[i][2];
	      else
		nb = argv[i+1];	/*initialize nearby term*/
	      BS=1;	/*set the switch as 1 to indicate if there is -b option*/
	      break;
	    case't':
	      if(strlen(argv[i])!=2)
		sscanf(argv[i],"-t%d",tdis);
	      else
		*tdis = atoi(argv[i+1]);	/*initalize term distance*/
	      CTS=1;	/*set the switch as 1 to indicate if there is -t or -c option*/
	      TS=1;	/*set the switch as 1 to indicate if there is -t option*/	
	      *tdis = atoi(argv[i+1]);	/*initalize term distance*/
	      break;				
	    case'c':
	      CTS=1;	/*set the switch as 1 to indicate if there is -t or -c option*/
	      CS=1;	/*set the switch as 1 to indicate if there is -c option*/
	      if(strlen(argv[i])!=2)
		sscanf(argv[i],"-c%d",ctis);
	      else
		*ctis = atoi(argv[i+1]);	/*initialize char distance*/
	      break;
	    default:
	      printf("Undifined option:-%c\n",argv[i][1]);			
	    }
	}
      else{char*search_term = argv[i];}	/*just for the case that input is a term,here use termfp point this term.LS==0*/	
    }
  if(FS==0)	/*deal with if there is a -f,done*/
    readfp = stdin;	/*in case of the standard input*/
  if(LS==1){   /*we have -l option*/
    getterm(); /*get an array of all the search term*/
    if(BS==0){ /*not have -b option*/
      search_nonearby();
    }
    else{
      if(CTS==0){
	*tdis=5;/*regard the five is get from input,using term nearby function to excute*/
	

	search_nearby_term();//1
      }
      else{
	if(CS==1){
	  search_nearby_char();//2
	}
	else if(TS==1){
	  search_nearby_term();
	}
      }
    }
  }
  else
    search_std();/*std input searching*/
  return 0;
}
/*-------------------------------------------------------------------------------------*/
void getterm(){
  char ck;	/*ck is for char in termfile when searching*/
  char **term;	/*make a dynamic array of pointers that points to arrays of pointers*/
  long size1=sizeint; /*number of terms*/
  long size2=sizeterm;/*number of chars in a term*/
  term=malloc(size1*sizeof(char*));
  memset(term,0,size1*sizeof(char*));
  long str1=0;	/*first peremeter,indicates a term*/
  long str2=0;	/*second peremeter,indicates a char within a term*/
  term[str1]=malloc((size2+1)*sizeof(char));
  memset(term[str1],0,(size2+1)*sizeof(char));
  while(ck=fgetc(termfp)!=EOF){
    if(ck!='\n'){
      term[str1][str2]=ck;
      str2++;
    }
    else{
      if(str1+1==size1){	/*avoid overload*/
	size1=size1*2;	/*double the size*/
	term=realloc(term,size1*sizeof(char*));
	memset(term[size1/2-1],0,(size1/2+1)*sizeof(char*));
      }
      str1++;
      term[str1]=malloc((size2+1)*sizeof(char));
      memset(term[str1],0,(size2+1)*sizeof(char));
      str2=0;
    }			
  }	
}
/*--------------------------------------------------------------------------------------*/
void search_std(){
  char *search_term;
  int isNewWord=1,i=0;/*a switch, a peremeter for counted number*/
  while ((ch =getchar()) !=EOF){
    letter ++;
    if (isalnum(ch)){
      if(isNewWord){
	word++;
	isNewWord = 0;
      }
    }
    else{
      isNewWord = 1;
    }
    
    if(i+1 == strlen(search_term)){
      printf("%ld,%ld,%s\n",letter+1-strlen(search_term),word,search_term);
      i = 0;
    }
    else{
      if(tolower(ch) == search_term[i]){
	i ++;
      }
      else{
	i = 0;
      }
    }
  }
}
/*--------------------------------------------------------------------------------*/

