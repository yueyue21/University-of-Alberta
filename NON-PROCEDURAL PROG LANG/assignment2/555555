#lang racket
     
(define (transform-if-to-cond code)
      ; locates every occurrence of an if expression in code and 
      ; transforms it into an equivalent cond
     
      ;  (if c p q)  => (cond (c p) (else q ))
      
      (define (trans c p q)
          (list 'cond (list c p) (list 'else q) ) )
      
      (if (and (list? code) (not (null? code)) (eq? 'if (first code)))
     
          ; recursively transform the parts of the if before transforming the if
          (apply trans (map transform-if-to-cond (rest code)))
          
          (if (list? code) 
                ; recursively transform expressions
                (map transform-if-to-cond code) 
                ; leaf expression, leave alone
                code)
          ))
    (define (transform-let-to-apply code)
      ; locates every occurrence of an if expression in code and 
      ; transforms it into an equivalent cond
     
      ;  (if c p q)  => (cond (c p) (else q ))
      
      (define (trans d) 
       (list (cons 'lambda (cons (list (caar (car d)) (caadr (car d)) ) (cdr d)))  (second (car (car d))) (second (cadr (car d)) )))
      
      (if (and (list? code) (not (null? code)) (eq? 'if (first code)))
     
          ; recursively transform the parts of the if before transforming the if
          (apply trans (map transform-let-to-apply (rest code)))
          
          (if (list? code) 
                ; recursively transform expressions
                (map transform-let-to-apply code) 
                ; leaf expression, leave alone
                code)
          ))
    
    (define code-1
      '(let ((a 1) (b 2)) (+ a b))
                
         )
     
    (define (test-1)
      (newline)
      (displayln code-1)
      (displayln (eval code-1))
      (newline)
      
      ; test the if transform
      (define t1 (transform-if-to-cond code-1))
      (displayln t1)
      (displayln (eval t1))
      (newline)
      
      ; test the let transform
      (define t2 (transform-let-to-apply code-1))
      (displayln t2)
      (displayln (eval t2))
      (newline)
      
      ; test the two different composition orders of the transforms
      (define t3 (transform-let-to-apply (transform-if-to-cond code-1)))
      (displayln t3)
      (displayln (eval t3))
      (newline)
      (define t4 (transform-if-to-cond(transform-let-to-apply code-1)))
      (displayln t4)
      (displayln (eval t4))
    )