#lang racket

(define sample '(((a 1) (b 2)) (+ a b)))

(define (trans d) 
       (list (cons 'lambda (cons (list (caar (car d)) (caadr (car d)) ) (cdr d)))  (second (car (car d))) (second (cadr (car d)) )))
                        ; (let ( (v1 e1) (v2 e2) ... (vn en) ) b1 b2 ... bk )
      ; =>
      ; ((lambda (v1 v2 ... vn) b1 b2 ... bk) e1 e2 ... en)
;'((lambda (a b) (+ a b)) 1 2)
(define code-1
      '(let ( (x 1) (y 2) )
         ;(displayln (list "got" x y))
         (let ( (z (+ x y)) )
                ;(displayln (list "z" z))
                (if (< x y) 
                    (list "x smaller")
                    (list "y smaller")
                    )
                )
         ))