#lang racket

(define (transform-let-to-apply code)
  (define (trans c p q)
      (list 'cond (list c p) (list 'else q) ) )
  
  (if (and (list? code) (not (null? code)) (eq? 'if (first code)))

      ; recursively transform the parts of the if before transforming the if
      (apply trans (map transform-let-to-apply (rest code)))
      
      (if (list? code) 
            ; recursively transform expressions
            (map transform-let-to-apply code)   
            ; leaf expression, leave alone
            code)
      ))

(define (transform-let-to-apply code)
      ; (let ( (v1 e1) (v2 e2) ... (vn en) ) b1 b2 ... bk )
      ; =>
      ; ((lambda (v1 v2 ... vn) b1 b2 ... bk) e1 e2 ... en)
     
      )

(define code-1
      '(let ( (x 1) (y 2) )
         (if (< x y) 
             (list "x smaller")
             (list "y smaller")
             )
         )
  )

(define (test-1)
      (newline)
      (displayln code-1)
      (displayln (eval code-1))
      (newline)
      
      ; test the if transform
      (define t1 (transform-if-to-cond code-1))
      (displayln t1)
      (displayln (eval t1))
      (newline)
  )
